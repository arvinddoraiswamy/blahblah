https://stackoverflow.com/questions/730620/how-does-a-hash-table-work
http://web.textfiles.com/hacking/DYNAMICHELL/hashtables.txt

4b7c: create_hash_table: Hash table starts at 5006 (5000-534f)
4ba2-4bae: Zeroes out a huge chunk starting at 3dec till 43eb.
4bb6: Accepts user input.

Jump to 4ce0:
4ce6: Tests if you've entered some input at least. Jumps back to 4bbe if you have. If you don't its jumping back into the 4ba2-4bae block.
4bbe: Is the first character 'a'? Probably coz of 'access'. The only other correct character is 'n'. Anything else goes to 4cbe - "Invalid command".
if not 'a':
  jmp 4c38
else if 'a':
  proceed as normal
else
  jmp 4cbe: Invalid command
  Shuts down program
  So it has to be 'a' or 'n'. Nothing else.


Try "n ard 1111" as input. This adds an account d with a pin of 04d2. Now trying "access d 04d2" gives me an access denied. This jumps past the check at 4c10 so I'm on track for sure. (4a16 moves the pin in correctly). So in short, if I create a 6e657720account and use that in "access" I jump past the check.

The and 7fff is another check. If I can get past that I will get an access granted. Okay so "access d 1234" (use the original pin) gets me past this check too. I now have an "Access granted but account not activated" message. So I need to figure out how to activate the account. I need to go to 4c26 and not 4c2c or 4c32 somehow.

Got to do something inside the get_from_table that passes the -1 check and r10 > r15. That will give me the "access granted". The xor sets the ZF. Wont work. This is true ONLY if r10=r15.. so its not this route..try something else.

Adding multiple user accounts:
-- Long names seem to overwrite the code section
-- Duplicate adding seems to decrement by 4 and overwrite again
-- 16 char usernames including a null byte go into memory, followed by a pin. Duplicates are allowed.
-- access <15 char username> <pin> works and gives me a message. So it's searching for 15 char names in memory - that's clear.
-- The Hash table seems to have a pointer to the previous structure and the next structure. Its probably used when trying to search for a name. Maybe 
   corrupt that somehow? To point to shell code?
-- The get_from_table does some kind of a lookup, uses the pin (and r10 and r15) to calculate an offset to jump to and gives you a message accordingl
   y.
-- Username is the key to the table. Gets the value out and then compares the pin outside and displays a message accordingly.
-- Pin cant be overwritten. Always a calculation: 2 bytes.

Hash table has a number of buckets. Each time a different bucket is chosen - sometimes it's the same bucket, sometimes different - maybe further sorting based on length as well.

Maybe the add_to_table is what will overwrite the pointer. This is called at 4cb8 and is triggered when I add a 6e657720account. One of the buckets is randomly (well based on something :D) selected and the username and the pin are written into the bucket. The user doesn't have control over the pointer..really. Lets try adding a 2nd user though and see what it does.

At 5006 there seems to be a counter of how many buckets there are in total and each time a user is added, that increases. The bucket start address iobtained at 488a. The actual bucket where the username will be put is at 48a4 - this is decided based on an addition performed with hash(username). The 16 chars per bucket is at 48ba. Pin is moved in to bucket at 48c8. No way I can overwrite the pointer using add_to_table either :(

So rehash() calls free() and there seems to be a counter tracking the number of user accounts at 485e where the counter at 5006 is compared with 10. As soon as there are 11 user accounts on the system, it goes into rehash() at 4866 and maybe does something..cleaning up stuff maybe. Lets create 11 accounts ugh.

Yep. I'm inside rehash.
- malloc(0x20) after the last bucket at 490a.
- Start of hash table looks to be overwritten. 500c contains 5342. This was at 490e.
- malloc(0x20) done again after the bucket just created at 4914.
- Last bucket address also overwritten. 500e contains 5368. Looks like it's creating a bucket to store the 6e657720user accounts and is defining the
  start and end address of the bucket.
- More buckets created at the end - prolly to allow more accounts to be easily created. This loop ends at 4962. Break after that.
- 4972 starts handling the current account.
- 499a jumps back to 497e and calls add_to_table to create the 6e657720account and add it to the 6e657720bucket. Then it frees the location of the current
  bucket.
- It does this sequentially throughout the bucket. Get username. Add. Free. Repeat. Till all 11 usernames are added to the 6e657720bucket.
- The free'ing doesn't seem to do much, just makes b5.. b4 everytime. It does change the values of 5042 though for some reason, increasing them every time. Why is unclear.
- It changes the next pointer of the first record in the bucket, to the next record that will be freed.
- It changes the previous pointer of the next block to be freed to that of the first record in the bucket.
- The pointers of each individual bucket are not changed though. Just b5 becomes b4, maybe marking the block as free?
- Once all the buckets are copied and all the buckets are freed, it goes to the back_to_back free calls.
- These then adjust pointers in the "main" bucket itself and point to the last slot in that bucket which was freed.
- Then code jumps back to add_to_table and adds the record.


- Once the 2nd block of memory gets allocated a lot of user accounts keep getting added there. And I can't reach the pointers with my user input.
- Tried force adding sequential usernames to forcibly overflow a bucket, hoping it would go into a pointer but no.. didn't happen. :( The addition seems to happen very cleverly.
- Let me try that with some inbetween block rather than the last block as there's no next pointer for the last block.
- Cant smash the stack with the "Invalid command" path either.
- Adding a user called ar23 gave me an error saying "Can not have a pin with a high bit set"
- Sometimes adding accounts just fails. It just doesnt get added. Lol.

- Okay so 2 accounts from the 8bbf group. Then 6 from the 1256 group and then fill the rest up. Causes a crash once I get to rehash. Which is kinda positive. Need to see where now.
- Hm. So it crashes with a "Heap exhausted, aborting" when it tries to do the malloc and expand the hash table for some reason. The moment I touch one of those bucket pointers, it crashes. Why? Who knows? :D
- Pointing it to valid OR invalid addresses makes no difference. It still crashes. Also interestingly though, when I ran "reset" next, it said that my insn address was unaligned. So I'm certainly closer to a solution - just need to tweak it a little bit more.
- So if I point it back into one of the existing buckets with a valid pointer, it doesn't crash but it also goes round and round in a recursive loop. HaHa :D
- So if I tamper only with the pointer to the previous bucket, it doesn't crash. But it's no use either as it just overwrites my code.
- I put a *random* address in the next pointer of the overflown bucket - that got overwritten too with where my next bucket starts.

- So say my shell code is at 4040, I need to write *something in memory* somewhere such that pc=4040.
- In other words, - PC uses something in memory to go to my shell code. Need to find that place. So the question then is:
- Where is the app looking so that it can load something into pc?

free()
4748 - Mark current block as free. Set prev->next= current->next
474c - current->next->prev=current->prev

1. Looks at the next pointer of the overwritten block. Say its 5362.
2. Go to 5362. Grab the address stored there. Say its 52e2. Now it calls free(52e2)
3. Stores the prev pointer. It goes 6 bytes backwards to do this. Hmm. Seems very similar to algiers here.
4. Loads the contents of 5040 (somewhere at the start) into a reg. Does some math and moves a 6e657720value back to 5040.
5. Moves the next pointer of the current block into the next pointer at the start. This is the address of the next block as this block is now free.
6. Sets the prev pointer of the next block to that of the first block. So the pointers are all set now. It starts to work on the current block now.
7. Stores the prev pointers of the current block. Stores the next block. Also stores the value of that funny 3rd byte.
8. And it exits.
9. So try and overwrite it with something close to the return address of the function. So that ret gets overwritten with your code. Maybe anyway :D

Editing a bucket manually works with this flow.
11. Prev of the overflown bucket must point to the start of your shell code. Say 52e0. Maybe shell code in a separate bucket.
12. Next of the overflown bucket is copied into ret of rehash (points to ret). Ret of rehash is at 3de2.
13. This causes 52e0 to be copied into ret and it jumps there once rehash returns.

More interesting things:
1. The pointers while flushed are copied into the next blocks that are malloced. They are copied into different buckets though. Point though..is that it's not totally destroyed. How to use that is another problem all together :)
2. Ah. Now it appears that after another 10 accounts are added rehash is called again.
3. So at some point, the prev pointer that was copied is passed to free()

Problems: Prev (472e and 474c) and next (malloc) are both overwritten. How can we prevent that?
- Have to do something in the previous block so that the prev pointer of the next block is not overwritten . But what?
- 503c is somewhere up up up there and I dont have any control.
- Maybe I will try and use 2 buckets all with the same hash.

Bucket 1: prev is 52dc and next is 52de
Bucket 2: prev is 533c and next is 533e
Bucket 3: prev is 5396 and next is 5398
Bucket 4: prev is 53e8 and next is 53ea

I dont have control on Bucket 1. I edit next of Bucket 2 manually from 533e to 53e8. This so that it skips over Bucket 3 completely. By the time it comes to free() though, next of all the buckets, Bucket 2 included have been clobbered. So nothing much I can do tbf.

Then lastly, even if I manually edit Bucket 2 next back to 53e8, it just completely ignores everything after freeing bucket 1 and returns from rehash. 

Hashes:
0x1044
n ardz50393 5252
n ardz62372 5252
n ardz74351 5252
n ardz86330 5252
n ardz88992 5252
n arz11798 5252
n arz21115 5252
n arz23777 5252
n arz35756 5252
n arz47735 5252
n arz59714 5252
n ary13304 5252

> let 521e=52dc
> let 527e=3de2

Prev of the 3rd bucket jumps to 5220. So this logic works.
> let 5220=1230
> let 5222=007f
> let 5224=12b0
> let 5226=4cec

And the door opens up.

If I can just get 3 users now *starting* with the following, the door should swing open :)

User 6: 1c52dc52   -- This sets next to jump over the next bucket.
User 11: 2052e23d  -- This frees bucket 3 and overwrites ret.
Some 1 other user starting at 5220: 30127f00b0124cec

1. Next HAS to be 3de2 for sure. Only keeping that causes the overwrite. So I need to play a little with prev.
2. Setting prev to the start of the shell code, causes the shell code to be clobbered.
3. Setting prev to 6 bytes before shell code does NOT clobber it, but you need to choose your code really really carefully. Its quite hard.
4. Shell code isn't going to fit though into 1 user. This is cause I lose 6 bytes from the first user due to the free() call and cant (although maybe possible) fit the rest into 10 bytes.
5. Use a jmp in the first user to jump to the 2nd user start and have the rest of your shell code over there.

Finally though :) :) I am done. I am glad I fought this for so long. It feels great now.

Here are my working users. Probably quite poor, CPU cycles wise but hey wtf :)

6e6577203012746262423012304054502132472035323532
6e6577203250fefeb012fc4c3564572035323532
6e6577201c523c5314986941412035323532
6e6577201c523c5315809041412035323532
6e6577201c523c5354219241412035323532
6e6577201c525c5113819141412035323532
6e6577201c523c5359869241412035323532
6e6577201c523c5385656541412035323532
6e6577201c523c5385664641412035323532
6e6577201c523c5385672741412035323532
6e6577204141414141414250e23d6359172035323532
6e6577203232424242423012307f8857182035323532
