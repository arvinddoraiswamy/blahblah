- Only alphanumeric input.
- max of 512 bytes. That means 512 characters as input. Or 1024 '41' characters. Starts at 2400. Ends at 25f0.
- INT is at 45fc.
- Input copied starting at 43ec. Ends at 45a1.
- 2400-25f0 flushed after copying.
- Giving maximum input gave me an error saying 'load address would wrap'. The program never stops running.
- Anything more than 16 characters and it will start overwriting the code section. That's cause it starts at 43ec and the code section starts at 4400.
- Ret address of main is 443c. This is on the stack at 43fe.
- 19 char input:41414141414141414141414141414141414242 will overwrite ret and we have our buffer overflow. Now we need to jump to shell code.
- The moment it sees a non-alphanumeric character it flushes the rest of the string with 0's. Here's some sample inputs.
30127f00b012fc45414141414141414141ec43 - Flush after 30
41417f41b012fc454141414141414141410044 - Flush after the second 41

- We have 61 valid characters to create our shell code in. Here's how.
30-39 (0-9)
41-5A (A-Z)
61-7A (a-z)

- Effectively the first 17 bytes are all fillers. Bytes 18 and 19 need to be a ret address i can jump to; the ret address should ALSO be alphanumeric.
- I'll have to continue jumping throughout the program finding instructions to create my stack and call INT and unlock the door.
- I can't use ROP because I can't use any of those values anyway.
- 4141414141414141414141414141414141 <ret address which jumps to shell code> <alphanumeric shell code which unlocks door>

- This makes sr ff00 and I can get the difference between pc and INT into r4 now. How to simulate a CALL instruction now, is the question.
414141414141414141414141414141414130444141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141413250627a32504830325056543450334534706b433652365236523652365236523652365236523652365236524144


This works and the door unlocks.
4141414141414141414141414141414141304441414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414134505a77347066313250627a32504830325055543044

- Store a location that contains 0010 into a register. I chose r4. The memory location which contained 0010 was 45f4. A little addition and subtraction gave me 45f4. (34 50 and then 34 70)
- Manipulate sr with 3 additions in a row. (32 50)
- Move the contents of the memory location held by r4 to pc. 45f4 contains 0010. So 0010 is moved to PC. (30 44)
- The next single step causes the door to open. :)
------------------------
Need to somehow CALL INT after getting sr=ff00. let pc=460c works so the technique is correct. But making pc 460c directly seems to fail.

1) Overwrite with junk till 460c without changing sr. This however crashes the program before I even get to ret and anyway it doesn't reach 460c. Not enough input. - FAIL

2) Once sr=ff00 edit pc=460c. This seems like the best way but I can't find an instruction to do it. - FAIL for now

3) Shell code which will simulate CALL #0x10. I can't directly use 0x10 or CALL. - FAIL

4) Use existing instructions to somehow increment pc to 460c - Maybe possible but it seems like a very complex way

5) Overwrite till conditional_unlock_door INT instruction and make the '7e'... '7f' somehow - Seems promising and I'm trying to replace push 7e with a MOV register, SP..or something else, but that ends up in SP getting overwritten :( - FAIL

http://pastebin.com/nP49fwn4
http://pastebin.com/iWnCRX0B
